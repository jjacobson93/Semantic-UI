/*!
 * # Semantic UI - Input
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

/*******************************
            Theme
*******************************/

@type    : 'element';
@element : 'input';



/*******************************
           Standard
*******************************/


/*--------------------
        Inputs
---------------------*/

.ui.input {
  position: relative;
  font-weight: normal;
  font-style: normal;
  display: inline-flex;
  color: @site-inputColor;
}
.ui.input input {
  margin: 0em;
  max-width: 100%;
  flex: 1 0 auto;
  outline: none;
  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
  text-align: @input-textAlign;
  line-height: @input-lineHeight;

  font-family: @input-inputFont;
  padding: @input-padding;

  background: @input-background;
  border: @input-border;
  color: @site-inputColor;
  border-radius: @input-borderRadius;
  transition: @input-transition;

  box-shadow: @input-boxShadow;
}


/*--------------------
      Placeholder
---------------------*/

/* browsers require these rules separate */

.ui.input input::-webkit-input-placeholder {
  color: @input-placeholderColor;
}
.ui.input input::-moz-placeholder {
  color: @input-placeholderColor;
}
.ui.input input:-ms-input-placeholder {
  color: @input-placeholderColor;
}


/*******************************
            States
*******************************/

/*--------------------
        Disabled
---------------------*/

.ui.disabled.input,
.ui.input input[disabled] {
  opacity: @site-disabledOpacity;
}

.ui.disabled.input input,
.ui.input input[disabled] {
  pointer-events: none;
}

/*--------------------
        Active
---------------------*/

.ui.input input:active,
.ui.input.down input {
  border-color: @input-downBorderColor;
  background: @input-downBackground;
  color: @input-downColor;
  box-shadow: @input-downBoxShadow;
}

/*--------------------
       Loading
---------------------*/

.ui.loading.loading.input > i.icon:before {
  position: absolute;
  content: '';
  top: 50%;
  left: 50%;

  margin: @site-loaderMargin;
  width: @site-loaderSize;
  height: @site-loaderSize;

  border-radius: @site-circularRadius;
  border: @site-loaderLineWidth solid @site-loaderFillColor;
}
.ui.loading.loading.input > i.icon:after {
  position: absolute;
  content: '';
  top: 50%;
  left: 50%;

  margin: @site-loaderMargin;
  width: @site-loaderSize;
  height: @site-loaderSize;

  animation: button-spin @site-loaderSpeed linear;
  animation-iteration-count: infinite;

  border-radius: @site-circularRadius;

  border-color: @site-loaderLineColor transparent transparent;
  border-style: solid;
  border-width: @site-loaderLineWidth;

  box-shadow: 0px 0px 0px 1px transparent;
}


/*--------------------
        Focus
---------------------*/

.ui.input.focus input,
.ui.input input:focus  {
  border-color: @input-focusBorderColor;
  background: @input-focusBackground;
  color: @input-focusColor;
  box-shadow: @input-focusBoxShadow;
}
.ui.input.focus input::-webkit-input-placeholder,
.ui.input input:focus::-webkit-input-placeholder {
  color: @input-placeholderFocusColor;
}
.ui.input.focus input::-moz-placeholder,
.ui.input input:focus::-moz-placeholder {
  color: @input-placeholderFocusColor;
}
.ui.input.focus input:-ms-input-placeholder,
.ui.input input:focus:-ms-input-placeholder {
  color: @input-placeholderFocusColor;
}



/*--------------------
        Error
---------------------*/

.ui.input.error input {
  background-color: @input-errorBackground;
  border-color: @input-errorBorder;
  color: @input-errorColor;
  box-shadow: @input-errorBoxShadow;
}

/* Error Placeholder */
.ui.input.error input::-webkit-input-placeholder {
  color: @input-placeholderErrorColor;
}
.ui.input.error input::-moz-placeholder {
  color: @input-placeholderErrorColor;
}
.ui.input.error input:-ms-input-placeholder {
  color: @input-placeholderErrorColor !important;
}

/* Focused Error Placeholder */
.ui.input.error input:focus::-webkit-input-placeholder {
  color: @input-placeholderErrorFocusColor;
}
.ui.input.error input:focus::-moz-placeholder {
  color: @input-placeholderErrorFocusColor;
}
.ui.input.error input:focus:-ms-input-placeholder {
  color: @input-placeholderErrorFocusColor !important;
}

/*******************************
           Variations
*******************************/

/*--------------------
      Transparent
---------------------*/


.ui.transparent.input input {
  border-color: transparent !important;
  background-color: transparent !important;
  padding: 0em !important;
  box-shadow: none !important;
}

/* Transparent Icon */
.ui.transparent.icon.input > i.icon {
  width: @input-transparentIconWidth;
}
.ui.transparent.icon.input > input {
  padding-left: 0em !important;
  padding-right: @input-transparentIconMargin !important;
}
.ui.transparent[class*="left icon"].input > input {
  padding-left: @input-transparentIconMargin !important;
  padding-right: 0em !important;
}

/* Transparent Inverted */
.ui.transparent.inverted.input {
  color: @input-transparentInvertedColor;
}
.ui.transparent.inverted.input input {
  color: inherit;
}

.ui.transparent.inverted.input input::-webkit-input-placeholder {
  color: @input-transparentInvertedPlaceholderColor;
}
.ui.transparent.inverted.input input::-moz-placeholder {
  color: @input-transparentInvertedPlaceholderColor;
}
.ui.transparent.inverted.input input:-ms-input-placeholder {
  color: @input-transparentInvertedPlaceholderColor;
}


/*--------------------
         Icon
---------------------*/

.ui.icon.input > i.icon {
  cursor: default;
  position: absolute;
  line-height: 1;
  text-align: center;
  top: 0px;
  right: 0px;
  margin: 0em;
  height: 100%;

  width: @input-iconWidth;
  opacity: @input-iconOpacity;
  border-radius: 0em @input-borderRadius @input-borderRadius 0em;
  transition: @input-iconTransition;
}
.ui.icon.input > i.icon:not(.link) {
  pointer-events: none;
}
.ui.icon.input input {
  padding-right: @input-iconMargin !important;
}

.ui.icon.input > i.icon:before,
.ui.icon.input > i.icon:after {
  left: 0;
  position: absolute;
  text-align: center;
  top: 50%;
  width: 100%;
  margin-top: @input-iconOffset;
}
.ui.icon.input > i.link.icon {
  cursor: pointer;
}
.ui.icon.input > i.circular.icon {
  top: @input-circularIconVerticalOffset;
  right: @input-circularIconHorizontalOffset;
}

/* Left Icon Input */
.ui[class*="left icon"].input > i.icon {
  right: auto;
  left: @input-borderWidth;
  border-radius: @input-borderRadius 0em 0em @input-borderRadius;
}
.ui[class*="left icon"].input > i.circular.icon {
  right: auto;
  left: @input-circularIconHorizontalOffset;
}
.ui[class*="left icon"].input > input {
  padding-left: @input-iconMargin !important;
  padding-right: @input-horizontalPadding !important;
}

/* Focus */
.ui.icon.input > input:focus ~ i.icon {
  opacity: 1;
}

/*--------------------
        Labeled
---------------------*/

/* Adjacent Label */
.ui.labeled.input > .label {
  flex: 0 0 auto;
  margin: 0;
  font-size: @site-relativeMedium;
}
.ui.labeled.input > .label:not(.corner) {
  padding-top: @input-verticalPadding;
  padding-bottom: @input-verticalPadding;
}

/* Regular Label on Left */
.ui.labeled.input:not([class*="corner labeled"]) .label:first-child {
  border-top-right-radius: 0px;
  border-bottom-right-radius: 0px;
}
.ui.labeled.input:not([class*="corner labeled"]) .label:first-child + input {
  border-top-left-radius: 0px;
  border-bottom-left-radius: 0px;
  border-left-color: transparent;
}
.ui.labeled.input:not([class*="corner labeled"]) .label:first-child + input:focus {
  border-left-color: @input-focusBorderColor;
}

/* Regular Label on Right */
.ui[class*="right labeled"].input input {
  border-top-right-radius: 0px !important;
  border-bottom-right-radius: 0px !important;
  border-right-color: transparent !important;
}
.ui[class*="right labeled"].input input + .label {
  border-top-left-radius: 0px;
  border-bottom-left-radius: 0px;
}

.ui[class*="right labeled"].input input:focus {
  border-right-color: @input-focusBorderColor !important;
}

/* Corner Label */
.ui.labeled.input .corner.label {
  top: @input-labelCornerTop;
  right: @input-labelCornerRight;
  font-size: @input-labelCornerSize;
  border-radius: 0em @input-borderRadius 0em 0em;
}

/* Spacing with corner label */
.ui[class*="corner labeled"]:not([class*="left corner labeled"]).labeled.input input {
  padding-right: @input-labeledMargin !important;
}
.ui[class*="corner labeled"].icon.input:not([class*="left corner labeled"]) > input {
  padding-right: @input-labeledIconInputMargin !important;
}
.ui[class*="corner labeled"].icon.input:not([class*="left corner labeled"]) > .icon {
  margin-right: @input-labeledIconMargin;
}

/* Left Labeled */
.ui[class*="left corner labeled"].labeled.input input {
  padding-left: @input-labeledMargin !important;
}
.ui[class*="left corner labeled"].icon.input > input {
  padding-left: @input-labeledIconInputMargin !important;
}
.ui[class*="left corner labeled"].icon.input > .icon {
  margin-left: @input-labeledIconMargin;
}

/* Corner Label Position  */
.ui.input > .ui.corner.label {
  top: @input-borderWidth;
  right: @input-borderWidth;
}
.ui.input > .ui.left.corner.label {
  right: auto;
  left: @input-borderWidth;
}


/*--------------------
        Action
---------------------*/

.ui.action.input > .button,
.ui.action.input > .buttons {
  display: flex;
  align-items: center;
  flex: 0 0 auto;
}
.ui.action.input > .button,
.ui.action.input > .buttons > .button {
  padding-top: @input-verticalPadding;
  padding-bottom: @input-verticalPadding;
  margin: 0;
}

/* Button on Right */
.ui.action.input:not([class*="left action"]) > input {
  border-top-right-radius: 0px !important;
  border-bottom-right-radius: 0px !important;
  border-right-color: transparent !important;
}
.ui.action.input:not([class*="left action"]) > .dropdown:not(:first-child),
.ui.action.input:not([class*="left action"]) > .button:not(:first-child),
.ui.action.input:not([class*="left action"]) > .buttons:not(:first-child) > .button {
  border-radius: 0px;
}
.ui.action.input:not([class*="left action"]) > .dropdown:last-child,
.ui.action.input:not([class*="left action"]) > .button:last-child,
.ui.action.input:not([class*="left action"]) > .buttons:last-child > .button {
  border-radius: 0px @input-borderRadius @input-borderRadius 0px;
}

/* Input Focus */
.ui.action.input:not([class*="left action"]) input:focus {
  border-right-color: @input-focusBorderColor !important;
}

/* Button on Left */
.ui[class*="left action"].input > input {
  border-top-left-radius: 0px !important;
  border-bottom-left-radius: 0px !important;
  border-left-color: transparent !important;
}
.ui[class*="left action"].input > .dropdown,
.ui[class*="left action"].input > .button,
.ui[class*="left action"].input > .buttons > .button {
  border-radius: 0px;
}
.ui[class*="left action"].input > .dropdown:first-child,
.ui[class*="left action"].input > .button:first-child,
.ui[class*="left action"].input > .buttons:first-child > .button {
  border-radius: @input-borderRadius 0px 0px @input-borderRadius;
}
/* Input Focus */
.ui[class*="left action"].input > input:focus {
  border-left-color: @input-focusBorderColor !important;
}

/*--------------------
       Inverted
---------------------*/

/* Standard */
.ui.inverted.input input {
  border: none;
}

/*--------------------
        Fluid
---------------------*/

.ui.fluid.input {
  display: flex;
}
.ui.fluid.input > input {
  width: 0px !important;
}

/*--------------------
        Size
---------------------*/

.ui.mini.input {
  font-size: @site-relativeMini;
}
.ui.small.input {
  font-size: @site-relativeSmall;
}
.ui.input {
  font-size: @site-relativeMedium;
}
.ui.large.input {
  font-size: @site-relativeLarge;
}
.ui.big.input {
  font-size: @site-relativeBig;
}
.ui.huge.input {
  font-size: @site-relativeHuge;
}
.ui.massive.input {
  font-size: @site-relativeMassive;
}

